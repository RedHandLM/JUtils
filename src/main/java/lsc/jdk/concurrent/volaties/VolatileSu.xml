
 程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，
 那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据， 当运算结束之后，再将高速缓存中的数据刷新到主存当中

i=i+1 执行过程 先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，
 然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中



在多核CPU中，每条线程可能运行于不同的CPU中，
因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）
如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题


为了解决缓存不一致性问题，通常来说有以下2种解决方法：
1）通过在总线加LOCK#锁的方式
2）通过缓存一致性协议


缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。
它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，
因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。