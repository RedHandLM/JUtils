<?xml version="1.0" encoding="UTF-8"?>
<text>
 可以说，抽象工厂模式和工厂方法模式的区别就在于需要创建对象的复杂程度上。而且抽象工厂模式是三个里面最为抽象、最具一般性的。
抽象工厂模式的用意为：给客户端提供一个接口，可以创建多个产品族中的产品对象
而且使用抽象工厂模式还要满足一下条件：
	1)        系统中有多个产品族，而系统一次只可能消费其中一族产品。
	2)        同属于同一个产品族的产品以其使用。
来看看抽象工厂模式的各个角色（和工厂方法的如出一辙）：
	1)        抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。
	2)        具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。
	3)        抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。
	4)        具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。
	
	
	
2. 抽象工厂模式的实现
		利用工厂方法模式“生产两款车子”的实例介绍，便于理解该模式如何运用。
		在本例中，有两款车内空调品牌，分别为海尔和格力。也有两种发动机品牌，分别为国产和进口。
		（这就是一开始所说的，抽象工厂模式有多个产品抽象类，分别为空调抽象类和发动机抽象类）
		然后在本例中，对于A类车，搭载的是海尔空调和进口发动机。对于B类车，搭载的是格力空调和国产发动机。
	
</text>